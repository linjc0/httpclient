#include <gtest/gtest.h>
#include "httpclient.h"
#include "MyJsonObject.h"

namespace testing {
    class HttpClientTest : public Test
    {
    protected:
        HttpClientTest(){}
        ~HttpClientTest(){}

        virtual void SetUp(){}
        virtual void TearDown(){}
    };


    TEST_F (HttpClientTest, Get){
        http_client::HttpClient client("www.boost.org", "");
        std::string ret = client.get("/LICENSE_1_0.txt");
        EXPECT_EQ(ret, "Boost Software License - Version 1.0 - August 17th, 2003\n\nPermission is hereby granted, free of charge, to any person or organization\nobtaining a copy of the software and accompanying documentation covered by\nthis license (the \"Software\") to use, reproduce, display, distribute,\nexecute, and transmit the Software, and to prepare derivative works of the\nSoftware, and to permit third-parties to whom the Software is furnished to\ndo so, all subject to the following:\n\nThe copyright notices in the Software and this entire statement, including\nthe above license grant, this restriction and the following disclaimer,\nmust be included in all copies of the Software, in whole or in part, and\nall derivative works of the Software, unless such copies or derivative\nworks are solely in the form of machine-executable object code generated by\na source language processor.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\nSHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\nFOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n");
    }

    TEST_F(HttpClientTest, GetJson){
        http_client::HttpClient client("127.0.0.1", "3000");
        string data = client.get("/articles/9", http_client::JSON);
        MyJsonObject jsonObj;
        jsonObj.Parse(data);

        EXPECT_EQ("Test Article", jsonObj.GetString("title"));
        EXPECT_EQ("Bài báo kiểm tra", jsonObj.GetString("text"));	// Use Vietnamese to check unicode utf-8 support
    }

    TEST_F(HttpClientTest, PostJson){
        http_client::HttpClient client("api.myapp.com", "3000");
        string post_data = "{\"article\":{\"region_name\":\"DNB\", \"detail\":\"Hic Mưa rào vài nơi, và giông\", \"publish_at\":\"2015-03-29 01:00:00.000000\"}}";
        client.set_x_api_key("mnvdsl2f0ajfa-3jfsdoifas9fjafdnv");
        string ret_data = client.post("/v1/articles", post_data, http_client::JSON);

        MyJsonObject jsonObj;
        EXPECT_TRUE(jsonObj.Parse(ret_data) == NO_ERROR);
        EXPECT_EQ("Hic Mưa rào vài nơi, và giông", jsonObj.GetString("detail"));
    }

    TEST_F(HttpClientTest, PostFormData){
        http_client::HttpClient client("localhost", "3000");
        string post_data = "article[title]=hichic&article[text]=hichichichic";
        string ret_data = client.post("/articles", post_data);
        EXPECT_NE(ret_data.find("You are being"), string::npos);
    }
} // namespace testing



int main(int argc, char** argv){
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
